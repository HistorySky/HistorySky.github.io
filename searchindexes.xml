<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>七种分布式事务</title><url>/tech/2021-06-11-%E4%B8%83%E7%A7%8D%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url><categories/><tags/><content type="html"><![CDATA[什么是分布式事务分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器 「分别位于不同的分布式系统的不同节点之上」。
一个大的操作由N多的小的操作共同完成。而这些小的操作又分布在不同的服务上。针对于这些操作，「要么全部成功执行，要么全部不执行」。
为什么会有分布式事务？举个例子：
转账是最经典的分布式事务场景，假设用户 A 使用银行 app 发起一笔跨行转账给用户 B，银行系统首先扣掉用户 A 的钱，然后增加用户 B 账户中的余额。
如果其中某个步骤失败，此时就有可能会出现 2 种**「异常」**情况：
1.用户 A 的账户扣款成功，用户 B 账户余额增加失败 2.用户 A 账户扣款失败，用户 B 账户余额增加成功。 对于银行系统来说，以上 2 种情况都是**「不允许发生」**，此时就需要事务来保证转账操作的成功。
在**「单体应用」中，我们只需要贴上@Transactional注解就可以开启事务来保证整个操作的「原子性」**。
但是看似以上简单的操作，在实际的应用架构中，不可能是单体的服务，我们会把这一系列操作交给**「N个服务」去完成，也就是拆分成为「分布式微服务架构」**。
比如下订单服务，扣库存服务等等，必须要**「保证不同服务状态结果的一致性」**，于是就出现了分布式事务。
分布式理论CAP定理在一个分布式系统中，以下三点特性无法同时满足，「鱼与熊掌不可兼得」
一致性（C）： 在分布式系统中的所有数据备份，「在同一时刻是否拥有同样的值」。（等同于所有节点访问同一份最新的数据副本）
可用性（A）： 在集群中一部分节点**「故障」后，集群整体「是否还能响应」**客户端的读写请求。（对数据更新具备高可用性）
分区容错性（P）： 即使出现**「单个组件无法可用,操作依然可以完成」**。
具体地讲在分布式系统中，在任何数据库设计中，一个Web应用**「至多只能同时支持上面的两个属性」**。显然，任何横向扩展策略都要依赖于数据分区。因此，设计人员必须在一致性与可用性之间做出选择。
BASE理论在分布式系统中，我们往往追求的是可用性，它的重要程序比一致性要高，那么如何实现高可用性呢？
前人已经给我们提出来了另外一个理论，就是BASE理论，它是用来对CAP定理进行进一步扩充的。BASE理论指的是：
「Basically Available（基本可用）」 「Soft state（软状态）」 「Eventually consistent（最终一致性）」 BASE理论是对CAP中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。
分布式事务解决方案两阶段提交（2PC）熟悉mysql的同学对两阶段提交应该颇为熟悉，mysql的事务就是通过**「日志系统」**来完成两阶段提交的。
两阶段协议可以用于单机集中式系统，由事务管理器协调多个资源管理器；也可以用于分布式系统，「由一个全局的事务管理器协调各个子系统的局部事务管理器完成两阶段提交」。
这个协议有**「两个角色」**，
A节点是事务的协调者，B和C是事务的参与者。
事务的提交分成两个阶段
第一个阶段是**「投票阶段」**
1.协调者首先将命令**「写入日志」** **「发一个prepare命令」**给B和C节点这两个参与者 3.B和C收到消息后，根据自己的实际情况，「判断自己的实际情况是否可以提交」 4.将处理结果**「记录到日志」**系统 5.将结果**「返回」**给协调者 第二个阶段是**「决定阶段」**
当A节点收到B和C参与者所有的确认消息后
「判断」所有协调者「是否都可以提交」
如果可以则**「写入日志」**并且发起commit命令 有一个不可以则**「写入日志」**并且发起abort命令 参与者收到协调者发起的命令，「执行命令」
将执行命令及结果**「写入日志」**
**「返回结果」**给协调者
可能会存在哪些问题？「单点故障」：一旦事务管理器出现故障，整个系统不可用 「数据不一致」：在阶段二，如果事务管理器只发送了部分 commit 消息，此时网络发生异常，那么只有部分参与者接收到 commit 消息，也就是说只有部分参与者提交了事务，使得系统数据不一致。 「响应时间较长」：整个消息链路是串行的，要等待响应结果，不适合高并发的场景 「不确定性」：当事务管理器发送 commit 之后，并且此时只有一个参与者收到了 commit，那么当该参与者与事务管理器同时宕机之后，重新选举的事务管理器无法确定该条消息是否提交成功。 三阶段提交（3PC）三阶段提交又称3PC，相对于2PC来说增加了CanCommit阶段和超时机制。如果段时间内没有收到协调者的commit请求，那么就会自动进行commit，解决了2PC单点故障的问题。
但是性能问题和不一致问题仍然没有根本解决。下面我们还是一起看下三阶段流程的是什么样的？
第一阶段：**「CanCommit阶段」**这个阶段所做的事很简单，就是协调者询问事务参与者，你是否有能力完成此次事务。
如果都返回yes，则进入第二阶段 有一个返回no或等待响应超时，则中断事务，并向所有参与者发送abort请求 第二阶段：**「PreCommit阶段」**此时协调者会向所有的参与者发送PreCommit请求，参与者收到后开始执行事务操作，并将Undo和Redo信息记录到事务日志中。参与者执行完事务操作后（此时属于未提交事务的状态），就会向协调者反馈“Ack”表示我已经准备好提交了，并等待协调者的下一步指令。
第三阶段：**「DoCommit阶段」**在阶段二中如果所有的参与者节点都可以进行PreCommit提交，那么协调者就会从“预提交状态”转变为“提交状态”。然后向所有的参与者节点发送&quot;doCommit&quot;请求，参与者节点在收到提交请求后就会各自执行事务提交操作，并向协调者节点反馈“Ack”消息，协调者收到所有参与者的Ack消息后完成事务。相反，如果有一个参与者节点未完成PreCommit的反馈或者反馈超时，那么协调者都会向所有的参与者节点发送abort请求，从而中断事务。
补偿事务（TCC）TCC其实就是采用的补偿机制，其核心思想是：「针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作」。它分为三个阶段：
「Try,Confirm,Cancel」
Try阶段主要是对**「业务系统做检测及资源预留」**，其主要分为两个阶段
Confirm 阶段主要是对**「业务系统做确认提交」**，Try阶段执行成功并开始执行 Confirm阶段时，默认 Confirm阶段是不会出错的。即：只要Try成功，Confirm一定成功。 Cancel 阶段主要是在业务执行错误，需要回滚的状态下执行的业务取消，「预留资源释放」。 比如下一个订单减一个库存：
执行流程：
Try阶段：订单系统将当前订单状态设置为支付中，库存系统校验当前剩余库存数量是否大于1，然后将可用库存数量设置为库存剩余数量-1，
如果Try阶段**「执行成功」**，执行Confirm阶段，将订单状态修改为支付成功，库存剩余数量修改为可用库存数量 如果Try阶段**「执行失败」**，执行Cancel阶段，将订单状态修改为支付失败，可用库存数量修改为库存剩余数量 TCC 事务机制相比于上面介绍的2PC，解决了其几个缺点：
1.「解决了协调者单点」，由主业务方发起并完成这个业务活动。业务活动管理器也变成多点，引入集群。 2.「同步阻塞」：引入超时，超时后进行补偿，并且不会锁定整个资源，将资源转换为业务逻辑形式，粒度变小。 3.「数据一致性」，有了补偿机制之后，由业务活动管理器控制一致性 总之，TCC 就是通过代码人为实现了两阶段提交，不同的业务场景所写的代码都不一样，并且很大程度的**「增加」了业务代码的「复杂度」**，因此，这种模式并不能很好地被复用。
本地消息表执行流程：
消息生产方，需要额外建一个消息表，并**「记录消息发送状态」**。消息表和业务数据要在一个事务里提交，也就是说他们要在一个数据库里面。然后消息会经过MQ发送到消息的消费方。
如果消息发送失败，会进行重试发送。 消息消费方，需要**「处理」这个「消息」**，并完成自己的业务逻辑。
如果是**「业务上面的失败」，可以给生产方「发送一个业务补偿消息」**，通知生产方进行回滚等操作。 此时如果本地事务处理成功，表明已经处理成功了 如果处理失败，那么就会重试执行。 生产方和消费方定时扫描本地消息表，把还没处理完成的消息或者失败的消息再发送一遍。
消息事务消息事务的原理是将两个事务**「通过消息中间件进行异步解耦」**，和上述的本地消息表有点类似，但是是通过消息中间件的机制去做的，其本质就是&rsquo;将本地消息表封装到了消息中间件中&rsquo;。
执行流程：
发送prepare消息到消息中间件
发送成功后，执行本地事务
如果事务执行成功，则commit，消息中间件将消息下发至消费端 如果事务执行失败，则回滚，消息中间件将这条prepare消息删除 消费端接收到消息进行消费，如果消费失败，则不断重试
这种方案也是实现了**「最终一致性」，对比本地消息表实现方案，不需要再建消息表，「不再依赖本地数据库事务」了，所以这种方案更适用于高并发的场景。目前市面上实现该方案的「只有阿里的 RocketMQ」**。
最大努力通知最大努力通知的方案实现比较简单，适用于一些最终一致性要求较低的业务。
执行流程：
系统 A 本地事务执行完之后，发送个消息到 MQ； 这里会有个专门消费 MQ 的服务，这个服务会消费 MQ 并调用系统 B 的接口； 要是系统 B 执行成功就 ok 了；要是系统 B 执行失败了，那么最大努力通知服务就定时尝试重新调用系统 B, 反复 N 次，最后还是不行就放弃。 Sagas 事务模型Saga事务模型又叫做长时间运行的事务
其核心思想是**「将长事务拆分为多个本地短事务」，由Saga事务协调器协调，如果正常结束那就正常完成，如果「某个步骤失败，则根据相反顺序一次调用补偿操作」**。
Seata框架中一个分布式事务包含3种角色：
「Transaction Coordinator (TC)」：事务协调器，维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚。「Transaction Manager (TM)」：控制全局事务的边界，负责开启一个全局事务，并最终发起全局提交或全局回滚的决议。「Resource Manager (RM)」：控制分支事务，负责分支注册、状态汇报，并接收事务协调器的指令，驱动分支（本地）事务的提交和回滚。
seata框架**「为每一个RM维护了一张UNDO_LOG表」**，其中保存了每一次本地事务的回滚数据。
具体流程：1.首先TM 向 TC 申请**「开启一个全局事务」，全局事务「创建」成功并生成一个「全局唯一的 XID」**。
2.XID 在微服务调用链路的上下文中传播。
3.RM 开始执行这个分支事务，RM首先解析这条SQL语句，「生成对应的UNDO_LOG记录」。下面是一条UNDO_LOG中的记录，UNDO_LOG表中记录了分支ID，全局事务ID，以及事务执行的redo和undo数据以供二阶段恢复。
4.RM在同一个本地事务中**「执行业务SQL和UNDO_LOG数据的插入」。在提交这个本地事务前，RM会向TC「申请关于这条记录的全局锁」**。
如果申请不到，则说明有其他事务也在对这条记录进行操作，因此它会在一段时间内重试，重试失败则回滚本地事务，并向TC汇报本地事务执行失败。
6.RM在事务提交前，「申请到了相关记录的全局锁」，然后直接提交本地事务，并向TC**「汇报本地事务执行成功」**。此时全局锁并没有释放，全局锁的释放取决于二阶段是提交命令还是回滚命令。
7.TC根据所有的分支事务执行结果，向RM**「下发提交或回滚」**命令。
RM如果**「收到TC的提交命令」，首先「立即释放」相关记录的全局「锁」**，然后把提交请求放入一个异步任务的队列中，马上返回提交成功的结果给 TC。异步队列中的提交请求真正执行时，只是删除相应 UNDO LOG 记录而已。
RM如果**「收到TC的回滚命令」**，则会开启一个本地事务，通过 XID 和 Branch ID 查找到相应的 UNDO LOG 记录。将 UNDO LOG 中的后镜与当前数据进行比较，
如果不同，说明数据被当前全局事务之外的动作做了修改。这种情况，需要根据配置策略来做处理。 如果相同，根据 UNDO LOG 中的前镜像和业务 SQL 的相关信息生成并执行回滚的语句并执行，然后提交本地事务达到回滚的目的，最后释放相关记录的全局锁。 总结
本文介绍了分布式事务的一些基础理论，并对常用的分布式事务方案进行了讲解。
分布式事务本身就是一个技术难题，业务中具体使用哪种方案还是需要不同的业务特点自行选择，但是我们也会发现，分布式事务会大大的提高流程的复杂度，会带来很多额外的开销工作，「代码量上去了，业务复杂了，性能下跌了」。
所以，当我们真实开发的过程中，能不使用分布式事务就不使用。
]]></content></entry><entry><title>多线程事务丢失问题</title><url>/record/2021-05-15-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BA%8B%E5%8A%A1%E4%B8%A2%E5%A4%B1/</url><categories/><tags/><content type="html"><![CDATA[多线程事务丢失问题解决在service层创建线程池，调用多线程进行数据处理，使用JPA进行数据新增操作时，发现数据没有插入到MySQL表中，线程池也没有抛出异常，数据处理未捕获到异常，我以为是没有刷新到库，修改save方法为saveAndFlush，结果抛出异常，不存在事务
原因：service层调用多线程问题，以及有人在配置文件中配置了mongo事务管理器
解决思路灵感：使用jpa，发生的save不报错线程池
package com.wanmi.sbc.goods.doudiangoodspullrecord.service; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.scheduling.annotation.EnableAsync; import org.springframework.scheduling.concurrent.CustomizableThreadFactory; import java.util.concurrent.*; /** * &lt;p&gt;抖店商品同步线程池&lt;/P&gt; * @ClassName DoudianGoodsPullPool * * @author liuwei * @Date 2021/4/23 11:05 */ @Configuration @EnableAsync public class DoudianGoodsPullPool { //线程池大小 private static final int CORE_POOL_SIZE = 10; //线程名称 private static final String THREAD_NAME = &#34;doudianGoodsPull&#34;; //最大线程数 private static final int MAXI_NUM_SIZE = 20; //超时时间 private static final int KEEP_ALIVE_TIME = 30; //阻塞队列长度 private static final int LINK_BLOCK_QUEUE_SIZE = 1000; private LinkedBlockingQueue doudianPullBlockingQueue; @Bean(name = &#34;doudianGoodsPull&#34;) public ExecutorService myExecutor(){ doudianPullBlockingQueue = new LinkedBlockingQueue&lt;Runnable&gt;(LINK_BLOCK_QUEUE_SIZE); ThreadFactory factory = new CustomizableThreadFactory(THREAD_NAME); ThreadPoolExecutor executor = new ThreadPoolExecutor( CORE_POOL_SIZE, MAXI_NUM_SIZE, KEEP_ALIVE_TIME, TimeUnit.SECONDS, doudianPullBlockingQueue, factory, new ThreadPoolExecutor.AbortPolicy()); executor.allowCoreThreadTimeOut(true); return executor; } } mongo事务管理器
package com.wanmi.sbc.goods.configuration.mongo; import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Primary; import org.springframework.data.mongodb.MongoDbFactory; import org.springframework.data.mongodb.MongoTransactionManager; @Configuration public class MongoConfig { @Primary @Bean @ConditionalOnProperty(prefix = &#34;mongo.transaction&#34;,value = &#34;enable&#34;,havingValue = &#34;true&#34;) MongoTransactionManager transactionManager(MongoDbFactory dbFactory) { return new MongoTransactionManager(dbFactory); } } Jpa事务管理器
package com.wanmi.sbc.goods.configuration.transactionmanager; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.orm.jpa.JpaTransactionManager; import org.springframework.transaction.PlatformTransactionManager; import javax.persistence.EntityManagerFactory; /** * @author liuwei * @create 2021-05-06 15:01 */ @Configuration public class JpaTransactionManagerConfig { // 创建Jpa事务管理器 @Qualifier(&#34;JpaTransactionManager&#34;) @Bean(name = &#34;JpaTransactionManager&#34;) public PlatformTransactionManager JpaTransactionManager(EntityManagerFactory factory) { return new JpaTransactionManager(factory); } } ]]></content></entry><entry><title>Sharding JDBC实现分库分表</title><url>/tech/2020-12-13-sharding%E5%AE%9E%E7%8E%B0%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</url><categories/><tags/><content type="html"><![CDATA[前言最近在项目中，实现需求时候，发现做有些表的数据量预计会很大，由于关系型数据库大多采用B+树类型的索引，在数据量超过阈值的情况下，索引深度的增加也将使得磁盘访问的IO次数增加，进而导致查询性能的下降，同时，高并发访问请求也使得集中式数据库成为系统的最大瓶颈。因此，借助了一些分库分表的中间件，来实现自动化分库分表的实现，这里采用Sharding JDBC 来实现数据分片。
介绍sharding-jdbc 是一款轻量级 Java 框架，以 jar 包形式提供服务，是属于客户端产品不需要额外部署，它相当于是个增强版的 JDBC 驱动；相比之下像 Mycat 这类需要单独的部署服务的服务端产品，就稍显复杂了。
sharding-jdbc的兼容性也非常强大，适用于任何基于 JDBC 的 ORM 框架，如：JPA， Hibernate，Mybatis，Spring JDBC Template 或直接使用的 JDBC。 完美兼容任何第三方的数据库连接池，如：DBCP， C3P0， BoneCP，Druid， HikariCP 等，几乎对所有关系型数据库都支持。 不难发现确实是比较强大的一款工具，而且它对项目的侵入性很小，几乎不用做任何代码层的修改，也无需修改 SQL 语句，只需配置待分库分表的数据表即可。 核心概念在使用Sharding-JDBC之前，下面有一些需要理解的几个核心概念
逻辑表水平拆分的数据库（表）的相同逻辑和数据结构表的总称。例：订单数据根据主键尾数拆分为10张表，分别是t_order_0到t_order_9，他们的逻辑表名为t_order。
真实表在分片的数据库中真实存在的物理表。即上个示例中的t_order_0到t_order_9。
数据节点数据分片的最小单元。由数据源名称和数据表组成，例：ds_0.t_order_0。
数据分片分片键用于分片的数据库字段，是将数据库(表)水平拆分的关键字段。例：将订单表中的订单主键的尾数取模分片，则订单主键为分片字段。SQL 中如果无分片字段，将执行全路由，性能较差。除了对单分片字段的支持，Sharding-JDBC 也支持根据多个字段进行分片。
分片算法通过分片算法将数据分片，支持通过=、&gt;=、&lt;=、&gt;、&lt;、BETWEEN和IN分片。分片算法需要应用方开发者自行实现，可实现的灵活度非常高。
目前提供4种分片算法。由于分片算法和业务实现紧密相关，因此并未提供内置分片算法，而是通过分片策略将各种场景提炼出来，提供更高层级的抽象，并提供接口让应用开发者自行实现分片算法。
精确分片算法对应 PreciseShardingAlgorithm，用于处理使用单一键作为分片键的 = 与 IN 进行分片的场景。需要配合 StandardShardingStrategy 使用。
范围分片算法对应 RangeShardingAlgorithm，用于处理使用单一键作为分片键的 BETWEEN AND、&gt;、&lt;、&gt;=、&lt;=进行分片的场景。需要配合 StandardShardingStrategy 使用
复合分片算法对应 ComplexKeysShardingAlgorithm，用于处理使用多键作为分片键进行分片的场景，包含多个分片键的逻辑较复杂，需要应用开发者自行处理其中的复杂度。需要配合 ComplexShardingStrategy 使用。
Hint分片算法对应 HintShardingAlgorithm，用于处理通过Hint指定分片值而非从SQL中提取分片值的场景。需要配合 HintShardingStrategy 使用。
分片策略Sharding-JDBC支持以下几种分片策略：不管理分库还是分表，策略基本一样。
标准分片策略：对应StandardShardingStrategy。提供对SQL语句中的=, IN和 BETWEEN AND的分片操作支持。 StandardShardingStrategy只支持单分片键，提供PreciseShardingAlgorithm和RangeShardingAlgorithm两个分片算法。PreciseShardingAlgorithm是必选的，用于处理=和IN的分片。 RangeShardingAlgorithm是可选的，用于处理BETWEEN AND分片，如果不配置RangeShardingAlgorithm，SQL中的BETWEEN AND将按照全库路由处理。 复合分片策略：对应ComplexShardingStrategy。复合分片策略。提供对SQL语句中 的=, IN 和 BETWEEN AND的分片操作支持。 ComplexShardingStrategy支持多分片键，由于多分片键之间的关系复杂，因此并未进行过多的封装，而是直接将分片键值组合以及分片操作符透传至分片算法，完全由应用开发者实现，提供最大的灵活度。 行表达式分片策略：对应InlineShardingStrategy。使用Groovy的表达式，提供对SQL 语句中的=和IN的分片操作支持，只支持单分片键。 对于简单的分片算法，可以通过简单的配置使用，从而避免繁琐的Java代码开发，如: t_order_$-&gt;{u_id % 8} 表示t_order表根据u_id模8，而分成8张表，表名称为t_order_0 到t_order_7 。 Hint分片策略：对应HintShardingStrategy。通过Hint而非SQL解析的方式分片的策略。 对于分片字段非SQL决定，而由其他外置条件决定的场景，可使用SQL Hint灵活的注入分片字段。例：内部系统，按照员工登录主键分库，而数据库中并无此字段。SQL Hint支持通过Java API和SQL注释(待实现)两种方式使用。 不分片策略：对应 NoneShardingStrategy。不分片的策略。 理解上面的切分算法，常用的大体分两种：取模算法 和 范围限定算法 1、取模算法 按字段取模（对hash结果取余数 (hash() mod N)，N为数据库实例数或子表数量）是最为常见的一种切分方式。
还拿 order 订单表举例，先对数据库从 0 到 N-1进行编号，对 order 订单表中 work_no 订单编号字段进行取模，得到余数 i，i=0存第一个库，i=1存第二个库，i=2存第三个库&hellip;.以此类推。
这样同一笔订单的数据都会存在同一个库、表里，查询时用相同的规则，用 work_no 订单编号作为查询条件，就能快速的定位到数据。
优点：
数据分片相对比较均匀，不易出现请求都打到一个库上的情况。 缺点：
这种算法存在一些问题，当某一台机器宕机，本应该落在该数据库的请求就无法得到正确的处理，这时宕掉的实例会被踢出集群，此时算法变成hash(userId) mod N-1，用户信息可能就不再在同一个库中了。
2、范围限定算法 按照 时间区间 或 ID区间 来切分，比如：我们切分的是用户表，可以定义每个库的 User 表里只存10000条数据，第一个库只存 userId 从1 ~ 9999的数据，第二个库存 userId 为10000 ~ 20000，第三个库存 userId 为 20001~ 30000&hellip;&hellip;以此类推，按时间范围也是同理。
优点：
单表数据量是可控的 水平扩展简单只需增加节点即可，无需对其他分片的数据进行迁移 能快速定位要查询的数据在哪个库 缺点：
由于连续分片可能存在数据热点，比如按时间字段分片，可能某一段时间内订单骤增，可能会被频繁的读写，而有些分片存储的历史数据，则很少被查询。 数据分片示例数据库脚本CREATE TABLE `miniprogram_subscribe_relation` ( `id` varchar(32) NOT NULL COMMENT &#39;主键id&#39;, `customer_id` varchar(32) DEFAULT NULL COMMENT &#39;用户id&#39;, `template_id` varchar(50) DEFAULT NULL COMMENT &#39;消息订阅模板id&#39;, `subscribe_status` tinyint(4) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;订阅状态,0:已订阅，1:未订阅&#39;, `order_id` varchar(32) DEFAULT NULL COMMENT &#39;关联订单id&#39;, `create_person` varchar(32) DEFAULT NULL COMMENT &#39;创建人&#39;, `create_time` datetime DEFAULT NULL COMMENT &#39;创建时间&#39;, `update_person` varchar(32) DEFAULT NULL COMMENT &#39;修改人&#39;, `update_time` datetime DEFAULT NULL COMMENT &#39;修改时间&#39;, `del_flag` tinyint(4) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;删除标识,0:未删除，1:已删除&#39;, PRIMARY KEY (`id`) USING BTREE, KEY `idx_subscribe_status` (`subscribe_status`), KEY `idx_del_flag` (`del_flag`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=&#39;小程序用户关联消息订阅模板关系表&#39;; 基于Spring Boot配置spring.shardingsphere.datasource.names=master,slave0 spring.shardingsphere.datasource.master.driver-class-name=com.mysql.cj.jdbc.Driver spring.shardingsphere.datasource.master.url=jdbc:mysql://172.19.25.60:3306/sbc-marketing?characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true spring.shardingsphere.datasource.master.username=root spring.shardingsphere.datasource.master.password=Wmi@2019 spring.shardingsphere.datasource.master.type=com.alibaba.druid.pool.DruidDataSource spring.shardingsphere.datasource.slave0.driver-class-name=com.mysql.cj.jdbc.Driver spring.shardingsphere.datasource.slave0.url=jdbc:mysql://172.19.25.60:3306/sbc-marketing?characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true spring.shardingsphere.datasource.slave0.username=root spring.shardingsphere.datasource.slave0.password=Wmi@2019 spring.shardingsphere.datasource.slave0.type=com.alibaba.druid.pool.DruidDataSource # 分片策略 spring.shardingsphere.sharding.tables.miniprogram_subscribe_relation.actual-data-nodes=ds0.miniprogram_subscribe_relation_$-&gt;{0..9} # 分片键（字段） spring.shardingsphere.sharding.tables.miniprogram_subscribe_relation.table-strategy.standard.sharding-column=customer_id # 精确分片算法 spring.shardingsphere.sharding.tables.miniprogram_subscribe_relation.table-strategy.standard.precise-algorithm-class-name=com.wanmi.sbc.message.algorithm.MiniprogramSubscribeRelationShardingAlgorithm # 逻辑表 spring.shardingsphere.sharding.binding-tables=miniprogram_subscribe_relation 精确分片算法实现/** * @author * 小程序消息订阅-用户关联模板关系表-分表规则 * PreciseShardingAlgorithm:精确分片算法，用于=、in场景 */ @Slf4j public class MiniprogramSubscribeRelationShardingAlgorithm implements PreciseShardingAlgorithm&lt;String&gt; { @Override public String doSharding(Collection&lt;String&gt; availableTargetNames, PreciseShardingValue&lt;String&gt; preciseShardingValue) { log.info(&#34;=======小程序用户关联模板关系分表开始=========&#34;); String logicTableName= preciseShardingValue.getLogicTableName(); int value = Math.abs(preciseShardingValue.getValue().hashCode() % availableTargetNames.size()); log.info(&#34;=======小程序用户关联模板关系分表结束，最终路由表名：{}=========&#34;,logicTableName + &#34;_&#34; + value); return logicTableName + &#34;_&#34; + value; } } 执行流程Sharding-JDBC 的原理总结起来很简单:
总结针对 miniprogram_subscribe_relation 表，使用了 customer_id 作为分片键，hash值取模分片规则处理，总体就完成了。 还有就是Sharing-JDBC对mysql的全文索引支持的不是很好，项目有使用到的地方也要注意一下。总结来说整个过程还是比较简单的，后续碰到其它业务场景，相信大家按照这个思路肯定都能解决的。
参考：官网]]></content></entry><entry><title>Spring Boot运行原理</title><url>/tech/2020-11-30-springboot%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</url><categories/><tags/><content type="html"><![CDATA[一、springboot启动原理及相关流程概览：springboot是基于spring的新型的轻量级框架，最厉害的地方当属**自动配置。**那我们就可以根据启动流程和相关原理来看看，如何实现传奇的自动配置
二、springboot的启动类入口用过springboot的技术人员很显而易见的两者之间的差别就是视觉上很直观的：springboot有自己独立的启动类（独立程序）
@SpringBootApplication public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } 从上面代码可以看出，Annotation定义（@SpringBootApplication）和类定义（SpringApplication.run）最为耀眼，所以要揭开SpringBoot的神秘面纱，我们要从这两位开始就可以了。
三、单单是SpringBootApplication接口用到了这些注解@Target(ElementType.TYPE) // 注解的适用范围，其中TYPE用于描述类、接口（包括包注解类型）或enum声明 @Retention(RetentionPolicy.RUNTIME) // 注解的生命周期，保留到class文件中（三个生命周期） @Documented // 表明这个注解应该被javadoc记录 @Inherited // 子类可以继承该注解 @SpringBootConfiguration // 继承了Configuration，表示当前是注解类 @EnableAutoConfiguration // 开启springboot的注解功能，springboot的四大神器之一，其借助@import的帮助 @ComponentScan(excludeFilters = { // 扫描路径设置（具体使用待确认） @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) }) public @interface SpringBootApplication { ... } 在其中比较重要的有三个注解，分别是：
1）@SpringBootConfiguration // 继承了Configuration，表示当前是注解类
2）@EnableAutoConfiguration // 开启springboot的注解功能，springboot的四大神器之一，其借助@import的帮助
3）@ComponentScan(excludeFilters = { // 扫描路径设置（具体使用待确认）
接下来对三个注解一一详解，增加对springbootApplication的理解
1）@Configuration注解按照原来xml配置文件的形式，在springboot中我们大多用配置类来解决配置问题
配置bean方式的不同：　a）xml配置文件的形式配置bean
&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt; &lt;beans xmlns=&#34;http://www.springframework.org/schema/beans&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:schemaLocation=&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&#34; default-lazy-init=&#34;true&#34;&gt; &lt;!--bean定义--&gt; &lt;/beans&gt; b）javaconfiguration的配置形式配置bean
@Configuration public class MockConfiguration{ //bean定义 } 注入bean方式的不同：
a）xml配置文件的形式注入bean
&lt;bean id=&#34;mockService&#34; class=&#34;..MockServiceImpl&#34;&gt; ... &lt;/bean&gt; b）javaconfiguration的配置形式注入bean
@Configuration public class MockConfiguration{ @Bean public MockService mockService(){ return new MockServiceImpl(); } } 任何一个标注了@Bean的方法，其返回值将作为一个bean定义注册到Spring的IoC容器，方法名将默认成该bean定义的id。
表达bean之间依赖关系的不同：
a）xml配置文件的形式表达依赖关系
&lt;bean id=&#34;mockService&#34; class=&#34;..MockServiceImpl&#34;&gt; &lt;propery name =&#34;dependencyService&#34; ref=&#34;dependencyService&#34; /&gt; &lt;/bean&gt; &lt;bean id=&#34;dependencyService&#34; class=&#34;DependencyServiceImpl&#34;&gt;&lt;/bean&gt; b）javaconfiguration配置的形式表达依赖关系
@Configuration public class MockConfiguration{ @Bean public MockService mockService(){ return new MockServiceImpl(dependencyService()); } @Bean public DependencyService dependencyService(){ return new DependencyServiceImpl(); } } 如果一个bean的定义依赖其他bean,则直接调用对应的JavaConfig类中依赖bean的创建方法就可以了。
2） @ComponentScan注解作用：
对应xml配置中的元素； ComponentScan的功能其实就是自动扫描并加载符合条件的组件（比如@Component和@Repository等）或者bean定义; 将这些bean定义加载到IoC容器中. 我们可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围，如果不指定，则默认Spring框架实现会从声明@ComponentScan所在类的package进行扫描。
3) @EnableAutoConfiguration此注解顾名思义是可以自动配置，所以应该是springboot中最为重要的注解。
在spring框架中就提供了各种以@Enable开头的注解，例如： @EnableScheduling、@EnableCaching、@EnableMBeanExport等； @EnableAutoConfiguration的理念和做事方式其实一脉相承简单概括一下就是，借助@Import的支持，收集和注册特定场景相关的bean定义。
@EnableScheduling是通过@Import将Spring调度框架相关的bean定义都加载到IoC容器【定时任务、时间调度任务】 @EnableMBeanExport是通过@Import将JMX相关的bean定义加载到IoC容器【监控JVM运行时状态】 @EnableAutoConfiguration也是借助@Import的帮助，将所有符合自动配置条件的bean定义加载到IoC容器。
@EnableAutoConfiguration作为一个复合Annotation,其自身定义关键信息如下：
@SuppressWarnings(&#34;deprecation&#34;) @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Inherited @AutoConfigurationPackage【重点注解】 @Import(EnableAutoConfigurationImportSelector.class)【重点注解】 public @interface EnableAutoConfiguration { ... } 其中最重要的两个注解已经标注：1、@AutoConfigurationPackage【重点注解】2、@Import(EnableAutoConfigurationImportSelector.class)【重点注解】
当然还有其中比较重要的一个类就是：EnableAutoConfigurationImportSelector.class
AutoConfigurationPackage注解：
static class Registrar implements ImportBeanDefinitionRegistrar, DeterminableImports { @Override public void registerBeanDefinitions(AnnotationMetadata metadata,BeanDefinitionRegistry registry) { register(registry, new PackageImport(metadata).getPackageName()); } 它其实是注册了一个Bean的定义
new PackageImport(metadata).getPackageName()，它其实返回了当前主程序类的同级以及子级 的包组件
以上图为例，DemoApplication是和demo包同级，但是demo2这个类是DemoApplication的父级，和example包同级
也就是说，DemoApplication启动加载的Bean中，并不会加载demo2，这也就是为什么，我们要把DemoApplication放在项目的最高级中。
Import(AutoConfigurationImportSelector.class)注解：
可以从图中看出 AutoConfigurationImportSelector 继承了 DeferredImportSelector 继承了 ImportSelector
ImportSelector有一个方法为：selectImports。
@Override public String[] selectImports(AnnotationMetadata annotationMetadata) { if (!isEnabled(annotationMetadata)) { return NO_IMPORTS; } AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader); AnnotationAttributes attributes = getAttributes(annotationMetadata); List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,attributes); configurations = removeDuplicates(configurations); Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes); checkExcludedClasses(configurations, exclusions); configurations.removeAll(exclusions); configurations = filter(configurations, autoConfigurationMetadata); fireAutoConfigurationImportEvents(configurations, exclusions); return StringUtils.toStringArray(configurations); } 可以看到方法中，它其实是去加载 public static final String FACTORIES_RESOURCE_LOCATION = &ldquo;META-INF/spring.factories&rdquo;;外部文件。这个外部文件，有很多自动配置的类。如下：
其中，最关键的要属@Import(EnableAutoConfigurationImportSelector.class)，借助EnableAutoConfigurationImportSelector，@EnableAutoConfiguration可以帮助SpringBoot应用将所有符合条件的@Configuration配置都加载到当前SpringBoot创建并使用的IoC容器。就像一只“八爪鱼”一样。
自动配置幕后英雄：SpringFactoriesLoader详解借助于Spring框架原有的一个工具类：SpringFactoriesLoader的支持，@EnableAutoConfiguration可以智能的自动配置功效才得以大功告成！
SpringFactoriesLoader属于Spring框架私有的一种扩展方案，其主要功能就是从指定的配置文件META-INF/spring.factories加载配置。
public abstract class SpringFactoriesLoader { //... public static &lt;T&gt; List&lt;T&gt; loadFactories(Class&lt;T&gt; factoryClass, ClassLoader classLoader) { ... } public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, ClassLoader classLoader) { .... } } 配合@EnableAutoConfiguration使用的话，它更多是提供一种配置查找的功能支持，即根据@EnableAutoConfiguration的完整类名org.springframework.boot.autoconfigure.EnableAutoConfiguration作为查找的Key,获取对应的一组@Configuration类
上图就是从SpringBoot的autoconfigure依赖包中的META-INF/spring.factories配置文件中摘录的一段内容，可以很好地说明问题。
所以，@EnableAutoConfiguration自动配置的魔法骑士就变成了：从classpath中搜寻所有的META-INF/spring.factories配置文件，并将其中org.springframework.boot.autoconfigure.EnableutoConfiguration对应的配置项通过反射（Java Refletion）实例化为对应的标注了@Configuration的JavaConfig形式的IoC容器配置类，然后汇总为一个并加载到IoC容器。
四、springboot启动流程概览图深入探索SpringApplication执行流程SpringApplication的run方法的实现是我们本次旅程的主要线路，该方法的主要流程大体可以归纳如下：
1） 如果我们使用的是SpringApplication的静态run方法，那么，这个方法里面首先要创建一个SpringApplication对象实例，然后调用这个创建好的SpringApplication的实例方法。在SpringApplication实例初始化的时候，它会提前做几件事情：
public static ConfigurableApplicationContext run(Object[] sources, String[] args) { return new SpringApplication(sources).run(args); } 根据classpath里面是否存在某个特征类（org.springframework.web.context.ConfigurableWebApplicationContext）来决定是否应该创建一个为Web应用使用的ApplicationContext类型。 使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationContextInitializer。 使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationListener。 推断并设置main方法的定义类。 @SuppressWarnings({ &#34;unchecked&#34;, &#34;rawtypes&#34; }) private void initialize(Object[] sources) { if (sources != null &amp;&amp; sources.length &gt; 0) { this.sources.addAll(Arrays.asList(sources)); } this.webEnvironment = deduceWebEnvironment(); setInitializers((Collection) getSpringFactoriesInstances( ApplicationContextInitializer.class)); setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class)); this.mainApplicationClass = deduceMainApplicationClass(); } 2） SpringApplication实例初始化完成并且完成设置后，就开始执行run方法的逻辑了，方法执行伊始，首先遍历执行所有通过SpringFactoriesLoader可以查找到并加载的SpringApplicationRunListener。调用它们的started()方法，告诉这些SpringApplicationRunListener，“嘿，SpringBoot应用要开始执行咯！”。
public ConfigurableApplicationContext run(String... args) { StopWatch stopWatch = new StopWatch(); stopWatch.start(); ConfigurableApplicationContext context = null; FailureAnalyzers analyzers = null; configureHeadlessProperty(); SpringApplicationRunListeners listeners = getRunListeners(args); listeners.starting(); try { ApplicationArguments applicationArguments = new DefaultApplicationArguments( args); ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments); Banner printedBanner = printBanner(environment); context = createApplicationContext(); analyzers = new FailureAnalyzers(context); prepareContext(context, environment, listeners, applicationArguments, printedBanner); // 核心点：会打印springboot的启动标志，直到server.port端口启动 refreshContext(context); afterRefresh(context, applicationArguments); listeners.finished(context, null); stopWatch.stop(); if (this.logStartupInfo) { new StartupInfoLogger(this.mainApplicationClass) .logStarted(getApplicationLog(), stopWatch); } return context; } catch (Throwable ex) { handleRunFailure(context, listeners, analyzers, ex); throw new IllegalStateException(ex); } } 3） 创建并配置当前Spring Boot应用将要使用的Environment（包括配置要使用的PropertySource以及Profile）。
private ConfigurableEnvironment prepareEnvironment(SpringApplicationRunListeners listeners,ApplicationArguments applicationArguments) { // Create and configure the environment ConfigurableEnvironment environment = getOrCreateEnvironment(); configureEnvironment(environment, applicationArguments.getSourceArgs()); listeners.environmentPrepared(environment); if (!this.webEnvironment) { environment = new EnvironmentConverter(getClassLoader()).convertToStandardEnvironmentIfNecessary(environment); } return environment; } 4） 遍历调用所有SpringApplicationRunListener的environmentPrepared()的方法，告诉他们：“当前SpringBoot应用使用的Environment准备好了咯！”。
public void environmentPrepared(ConfigurableEnvironment environment) { for (SpringApplicationRunListener listener : this.listeners) { listener.environmentPrepared(environment); } } 5） 如果SpringApplication的showBanner属性被设置为true，则打印banner。
private Banner printBanner(ConfigurableEnvironment environment) { if (this.bannerMode == Banner.Mode.OFF) { return null; } ResourceLoader resourceLoader = this.resourceLoader != null ? this.resourceLoader: new DefaultResourceLoader(getClassLoader()); SpringApplicationBannerPrinter bannerPrinter = new SpringApplicationBannerPrinter(resourceLoader, this.banner); if (this.bannerMode == Mode.LOG) { return bannerPrinter.print(environment, this.mainApplicationClass, logger); } return bannerPrinter.print(environment, this.mainApplicationClass, System.out); } 6） 根据用户是否明确设置了applicationContextClass类型以及初始化阶段的推断结果，决定该为当前SpringBoot应用创建什么类型的ApplicationContext并创建完成，然后根据条件决定是否添加ShutdownHook，决定是否使用自定义的BeanNameGenerator，决定是否使用自定义的ResourceLoader，当然，最重要的，将之前准备好的Environment设置给创建好的ApplicationContext使用。
7） ApplicationContext创建好之后，SpringApplication会再次借助Spring-FactoriesLoader，查找并加载classpath中所有可用的ApplicationContext-Initializer，然后遍历调用这些ApplicationContextInitializer的initialize（applicationContext）方法来对已经创建好的ApplicationContext进行进一步的处理。
@SuppressWarnings({ &#34;rawtypes&#34;, &#34;unchecked&#34; }) protected void applyInitializers(ConfigurableApplicationContext context) { for (ApplicationContextInitializer initializer : getInitializers()) { Class&lt;?&gt; requiredType = GenericTypeResolver.resolveTypeArgument(initializer.getClass(), ApplicationContextInitializer.class); Assert.isInstanceOf(requiredType, context, &#34;Unable to call initializer.&#34;); initializer.initialize(context); } } 8） 遍历调用所有SpringApplicationRunListener的contextPrepared()方法。
private void prepareContext(ConfigurableApplicationContext context,ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,&lt;br&gt;ApplicationArguments applicationArguments, Banner printedBanner) { context.setEnvironment(environment); postProcessApplicationContext(context); applyInitializers(context); listeners.contextPrepared(context); if (this.logStartupInfo) { logStartupInfo(context.getParent() == null); logStartupProfileInfo(context); } // Add boot specific singleton beans context.getBeanFactory().registerSingleton(&#34;springApplicationArguments&#34;,applicationArguments); if (printedBanner != null) { context.getBeanFactory().registerSingleton(&#34;springBootBanner&#34;, printedBanner); } // Load the sources Set&lt;Object&gt; sources = getSources(); Assert.notEmpty(sources, &#34;Sources must not be empty&#34;); load(context, sources.toArray(new Object[sources.size()])); listeners.contextLoaded(context); } 9)最核心的一步，将之前通过@EnableAutoConfiguration获取的所有配置以及其他形式的IoC容器配置加载到已经准备完毕的ApplicationContext。
private void prepareAnalyzer(ConfigurableApplicationContext context,FailureAnalyzer analyzer) { if (analyzer instanceof BeanFactoryAware) { ((BeanFactoryAware) analyzer).setBeanFactory(context.getBeanFactory()); } } 10） 遍历调用所有SpringApplicationRunListener的contextLoaded()方法。
public void contextLoaded(ConfigurableApplicationContext context) { for (SpringApplicationRunListener listener : this.listeners) { listener.contextLoaded(context); } } 调用ApplicationContext的refresh()方法，完成IoC容器可用的最后一道工序。 private void refreshContext(ConfigurableApplicationContext context) { refresh(context); if (this.registerShutdownHook) { try { context.registerShutdownHook(); }catch (AccessControlException ex) { // Not allowed in some environments. } } } 12） 查找当前ApplicationContext中是否注册有CommandLineRunner，如果有，则遍历执行它们。
private void callRunners(ApplicationContext context, ApplicationArguments args) { List&lt;Object&gt; runners = new ArrayList&lt;Object&gt;(); runners.addAll(context.getBeansOfType(ApplicationRunner.class).values()); runners.addAll(context.getBeansOfType(CommandLineRunner.class).values()); AnnotationAwareOrderComparator.sort(runners); for (Object runner : new LinkedHashSet&lt;Object&gt;(runners)) { if (runner instanceof ApplicationRunner) { callRunner((ApplicationRunner) runner, args); } if (runner instanceof CommandLineRunner) { callRunner((CommandLineRunner) runner, args); } } } 13）正常情况下，遍历执行SpringApplicationRunListener的finished()方法、（如果整个过程出现异常，则依然调用所有SpringApplicationRunListener的finished()方法，只不过这种情况下会将异常信息一并传入处理）
去除事件通知点后，整个流程如下：
public void finished(ConfigurableApplicationContext context, Throwable exception) { for (SpringApplicationRunListener listener : this.listeners) { callFinishedListener(listener, context, exception); } } 总结到此，SpringBoot的核心组件完成了基本的解析，综合来看，大部分都是Spring框架背后的一些概念和实践方式，SpringBoot只是在这些概念和实践上对特定的场景事先进行了固化和升华，而也恰恰是这些固化让我们开发基于Sping框架的应用更加方便高效。
]]></content></entry><entry><title>About</title><url>/about/</url><categories/><tags/><content type="html">《桃花源记》是东晋文学家陶渊明的代表作之一，是《桃花源诗》的序言，选自《陶渊明集》。此文借武陵渔人行踪这一线索，把现实和理想境界联系起来，通过对桃花源的安宁和乐、自由平等生活的描绘，表现了作者追求美好生活的理想和对当时的现实生活不满。
晋太元中，武陵人捕鱼为业。缘溪行，忘路之远近。忽逢桃花林，夹岸数百步，中无杂树，芳草鲜美，落英缤纷，渔人甚异之。复前行，欲穷其林。 林尽水源，便得一山，山有小口，仿佛若有光。便舍船，从口入。初极狭，才通人。复行数十步，豁然开朗。土地平旷，屋舍俨然，有良田美池桑竹之属。阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人。黄发垂髫，并怡然自乐。 见渔人，乃大惊，问所从来。具答之。便要还家，设酒杀鸡作食。村中闻有此人，咸来问讯。自云先世避秦时乱，率妻子邑人来此绝境，不复出焉，遂与外人间隔。问今是何世，乃不知有汉，无论魏晋。此人一一为具言所闻，皆叹惋。余人各复延至其家，皆出酒食。停数日，辞去。此中人语云：“不足为外人道也。” 既出，得其船，便扶向路，处处志之。及郡下，诣太守，说如此。太守即遣人随其往，寻向所志，遂迷，不复得路。 南阳刘子骥，高尚士也，闻之，欣然规往。未果，寻病终，后遂无问津者。</content></entry></search>